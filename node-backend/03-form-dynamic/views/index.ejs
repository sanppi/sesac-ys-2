<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>동적 폼 전송</title>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
    <!-- 아래 cdn은 axios 사용을 위한 것 -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>
    <form name="register">
        <input type="text" name="id" placeholder="ID" value="sanppi" pattern="^[a-z0-9]{5,}$" title="소문자, 숫자를 이용하여 5글자 이상" required/>
        <input type="password" name="pw" placeholder="password" value="1234"/>
        <input type="text" name="name" placeholder="이름" value="이산하" required/>
        <div>
        <button type="button" onclick="ajaxGet()">ajax get 전송</button>
        <button type="button" onclick="ajaxPost()">ajax post 전송</button>
        <button type="button" onclick="axiosGet()">axios get 전송</button>
        <button type="button" onclick="axiosPost()">axios post 전송</button>
        <button type="button" onclick="fetchGet()">fetch get 전송</button>
        <button type="button" onclick="fetchPost()">fetch post 전송</button>
        </div>

        <!-- 아래 두줄은 일반(동기) 폼 전송할 때 -->
        <!-- <input type="submit"  /> -->
        <!-- <button type="submit">제출</button> -->
        
    </form>
    <h3 id = "result"><h3>

    <script>
        function getData(){
            const form = document.forms['register']; 

            if(!form.checkValidity()) { // checkValidity 폼의 유효성 검사를 해서 boolean 값 반환
                form.reportValidity(); // reportValidity: 유효성 검사를 통과하지 못한 input에 대해 report 한다. 
                return false; // 함수는 return을 만나면 다음 코드를 읽지 않고 종료, 이 false값 들고 134번째 줄로 간다..?
            }

            // getData라는 함수의 반환값은 총 2가지 형태
            // false | object(객체 형태)

            const data= {
                id: form.id.value,
                pw: form.pw.value,
                name: form.name.value
            }

            return data;

        }

        function ajaxGet() {
            const form = document.forms['register']; 
            // console.dir(form); //dir로 찍으면 객체형태로 나옴
            // console.log(form.id); // name이 id인 것 선택
            // console.log(form.id.value);

            const data= {
                id: form.id.value,
                pw: form.pw.value,
                name: form.name.value
            }

            $.ajax({
                type: "GET", // 폼 속성 중 method
                url: "/ajax", // 폼 속성 중 action
                data: data,
                // url: `/ajax?id=${data.id}&pw=${data.pw}&name=${data.name}`,
                success: function( result ) { // 위 응답(세줄)을 성공적으로 받았을 경우에 대한 이벤트 핸들러
                    // 매개변수(result)에 응답이 들어옴
                    console.log(result) // send한 값을 여기서 받게 된 것. 
                    $("#result").html(`ajax get 요청 성공 ${result.name}님 환영합니다.`)
                }
            })
        }

        function ajaxPost() {
            const data= getData();

             $.ajax({
                type: "POST", // 폼 속성 중 method
                url: "/ajax", // 폼 속성 중 action
                data: data,
                success: function( result ) { // 위 응답(세줄)을 성공적으로 받았을 경우에 대한 이벤트 핸들러
                    // 매개변수(result)에 응답이 들어옴
                    console.log(result) // send한 값을 여기서 받게 된 것. 
                    const {
                        name
                    } = result;
                    $("#result").html(`ajax post 요청 성공 ${name}님 환영합니다.`)
                }
            })
        }

        function axiosGet() {
            const data = getData() // getData()의 return값을 data에 담기
            
            // axios 함수는 promise 객체를 return -> promise니깐 then, async, await 사용할 수 있음. 
            axios({
                method: "GET",
                url: "/axios",
                params: data, // get 요청으로 데이터 보낼 때 params 사용
                // params 대신 url에 query를 직접 작성해도 됨
            }).then((res)=>{
                // 서버에서 보내준 응답이 res에 담김
                console.log("res", res)
                console.log("res.data", res.data) 
                const {
                    name
                } = res.data

                $("#result").html(`axios get 요청 성공 ${name}님 환영합니다.`)
            })
        }

        async function axiosPost() {
            // 동적 폼 전송
            // 폼 유효성 검사도 하고 싶음.
            // 폼 유효성 검사를 input 태그의 pattern, minlength, required 등의 속성을 이용하여 싶음

            // input 태그의 pattern, minlength, required 등의 속성은 form의 "submit" 이 일어날 때 동작함.
            // 동적 폼 전송은 form 의 "submit"을 이용하는 게 아니고 -> 그렇기 때문에 자동으로 form검증이 안됨. 그래서 함수 이용해서 button 만들어 줌
            // 따라서, js 코드 내에서 폼 유효성 검사를 하는 코드를 작성

            // 방법 1)
            // const regex = /^[a-z0-9]{5,}$/, 
            // regex.test(form.id.value) -> 얘가 true일경우 넘어가고 false 일경우 안넘어가고 이렇게 했었음.
            // 그게 아니고 input에 있는 태그들에 required 등등 넣어서 사용하고 싶다면

            // 방법 2)
            // form.checkValidity()와 form.reportValidity()

            const data = getData();
            // data에 받아오는 값은 두가지 형태 중 하나
            // false | object(객체형태)
            if (!data) return; //  if문 안에 안들어가면 밑에 코드 쭉 실행됨.

            const res = await axios({ // res에 await 다음 줄들 완료된 결과값 담음. 
                method: "POST",
                url: "/axios",
                data: data, // post일 경우 서버에 데이터를 보낼 때, data 키에 담아서 보내면 됨
            })

            console.log("res", res) // 결과값 확인.  then에서 받았던 요청이 그대로 여기로 넘어갔다..?
            console.log("res.data", res.data) // 결과값의 data도 확인. 
            $("#result").html(`axios post 요청 성공 ${res.data.name}님 환영합니다.`) // 이름도 받아올 수 있음. 

            // axios({
            //     method: "POST",
            //     url: "/axios",
            //     data: data, // 만들어둔 data값을 data에 넣어두기
            // }).then((res)=>{
            //     console.log(res.data)
            //     const {
            //         name
            //     } = res.data
            //     $("#result").html(`axios post 요청 성공 ${name}님 환영합니다.`)
            // })
        }
    
        async function fetchGet() {
            const data = getData();
            if(!data) return;
            
            // 응답을 요청할 때..?
            // fetch(url, option 객체)
            // url -> action을 의미
            // option 객체에 method가 있음.
            // fetch는 method 기본값 get
            // fetch는 get 요청 시 데이터를 query로 만들어서 url과 함께 전송
            // const urlQuery = `id=${data.id}&name=${data.name}&pw=${data.pw}`
            const urlQuery = new URLSearchParams(data).toString() // toString이 윗 줄과 같은 쿼리 형태로 만들어줌

            // ---------------------방법 1 (then 체이닝)--------------------
            // fetch(`/fetch?${urlQuery}`)
            // .then((res)=> { // 응답은 첫번째 매겨번수로 들어오게 됨. 
            //     console.log("원본", res)
            //     // json() 메소드를 이용해서 parsing해야 함.
            //     // json()은 promise 기반
            //     // const data = res.json()
            //     // console.log(data) // Promise pending (undefined) (문제발생)
            //     return res.json()
            // }).then((res)=>{
            //     // 위에서 파싱해서 return하고 있기 때문에,
            //     // 이 함수의 res는 서버에서 여러불들이 응답한 객체가 나오게 됨. 
            //     console.log("파싱",res)
            // })

    
            // ---------------------방법 2(반만 async/await)--------------------
            // fetch(`/fetch?${urlQuery}`).then(async (res)=> { // 응답은 첫번째 매겨번수로 들어오게 됨. 
            //     console.log("원본", res);
            //     console.log("파싱", await res.json());
                // 응답을 파싱해야 함. 
                //.json() .text(), 
            // })

            // ---------------------방법 3(async/await)--------------------
            const oriRes = await fetch(`/fetch?${urlQuery}`)
            const res = await oriRes.json()
            console.log(res)

            }

        function fetchPost() {
            const data = getData()
            if(!data) return;

            // 원래는 content-type의 기본값 사용 : application/x-www-form-urlencoded
            // 하지만, fetch post 요청 시 기본값을 사용했을 때 동작을 안 함
            // content-type을 application/json 형태로 변경
            fetch("/fetch", {
                method: "POST", 
                headers: {
                    'Content-Type': 'application/json' // 키값에 하이픈 있어서 문자열로 감싼 것. 
                },
                body: JSON.stringify(data) // data 객체(js)를 json형태로 담아서 보냄. 
            }).then((res)=>{
                return res.json()
            }).then((res)=>{
                console.log(res)
                $("#result").html(`fetch post 요청 성공 ${res.name}님 환영합니다.`)
            })

        }

    </script>
</body>
</html>
// 원래 css는 이렇게 했음.
// :root {
//     --color-main: red
// }

// div {
//     color: var(--color-main);
//     width: calc(100vw - 100px);

// }

@import "./media.scss";

$color-main: red;
$break-md: 768px;

//  style 코드 블록을 @mixin을 이용하여 함수처럼 하나로 묶어두고,
// (css와 달리 자바스크립트 주석 이용하고 있다는 점은 참고)
@mixin box-width($size) {
  width: $size;
  height: $size;
}

// 사용할 때는 이렇게 include 키워드를 이용하여 사용
.box1 {
  @include box-width(100px);
  background-color: blue;
}

.box2 {
  @include box-width(200px);
  background-color: green;
}

.scss-parent {
  color: $color-main;
  //   width: 100% - 200;
  //   background-color: aqua;
}

.scss-parent {
  ul {
    background-color: black;
    color: white;
  }

  &:hover {
    cursor: pointer;
  }
}

// 원래라면 이렇게 해야 하는데 위처럼 중첩을 이용해서 할 수 있음.
// .scss-parent > ul {

// }

.btn {
  padding: 10px 20px;
  border: none;
  border-radius: 5px;
}

.btn-primary {
  @extend .btn;
  background-color: aqua;
}

//  네모네모
.origin-sass {
  display: flex;
  .box {
    @include box-width(100px);

    &.red {
      background-color: red;
    }

    &.orange {
      background-color: orange;
    }

    &.yellow {
      background-color: yellow;
    }

    &.green {
      background-color: green;
    }

    &.blue {
      background-color: blue;
    }

    &.purple {
      background-color: purple;
    }
  }
}

// @mixin tablet {
//   @media screen and (max-width: 768px) {
// .origin-sass{
//    display:block;
// }
//   }
// }

// 태블릿일 때는 768px
// @mixin tablet {
//   @media screen and (max-width: 768px) {
//     @content;
//   }
// }

// @mixin : css에서 묶어두고 싶은 코드블럭을 정의할 때 사용
// @include : 정의한 mixin을 사용할 때

// @content : 정의할 때 @content 키워드 적은 곳 - 사용할 때,
// 중괄호 안에 적은 내용 전부가 content에 들어감.

@include tablet {
  .origin-sass {
    display: block;
  }
}

// 핸드폰일 때는 500px
